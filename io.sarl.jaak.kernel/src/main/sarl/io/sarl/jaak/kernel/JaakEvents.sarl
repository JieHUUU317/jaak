/*
 * $Id$
 *
 * Jaak environment model is an open-source multiagent library.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014 St√©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.jaak.kernel

import io.sarl.jaak.envinterface.influence.MotionInfluenceStatus
import io.sarl.jaak.envinterface.perception.EnvironmentalObject
import io.sarl.jaak.envinterface.perception.Perceivable
import java.util.Collection
import java.util.UUID

event StampedEvent {
	val currentTime : float
	val lastStepDuration : float
	new(ct : float, lsd : float) {
		this.currentTime = ct
		this.lastStepDuration = lsd
	}
}

/** The Jaak simulation has started.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event SimulationStarted extends StampedEvent {
	new(ct : float, lsd : float) {
		super(ct, lsd)
	}
}

/** The Jaak simulation has stopped.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event SimulationStopped extends StampedEvent {
	new(ct : float, lsd : float) {
		super(ct, lsd)
	}
}

/** The perception for an agent.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event Perception extends StampedEvent {
	val lastMotionStatus : MotionInfluenceStatus
	val perceivedObjects : Collection<? extends Perceivable>
	new(ct : float, lsd : float, lms : MotionInfluenceStatus, po : Collection<? extends Perceivable>) {
		super(ct, lsd)
		this.lastMotionStatus = lms
		this.perceivedObjects = po
	}
}

/** An agent is appearing
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event TurtleCreated extends StampedEvent {
	var x : int
	var y : int
	var frustumType : String
	var frustumLength : int
	new(ct : float, lsd : float) {
		super(ct, lsd)
		x = -1
		y = -1
	}
}

/** An agent is desappearing
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event TurtleDestroyed extends StampedEvent {
	new(ct : float, lsd : float) {
		super(ct, lsd)
	}
}

/** An agent wants to move itself or something.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event Move extends StampedEvent {
	var linearMotionX : float
	var linearMotionY : float
	var angularMotion : float
	var movedObject : UUID
	new(ct : float, lsd : float) {
		super(ct, lsd)
	}
}

/** An agent wants to pick up.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event PickUp extends StampedEvent {
	val type : Class<? extends EnvironmentalObject>
	val object : EnvironmentalObject
	new(ct : float, lsd : float, t : Class<? extends EnvironmentalObject>) {
		super(ct, lsd)
		this.type = t
		this.object = null
	}
	new(ct : float, lsd : float, o : EnvironmentalObject) {
		super(ct, lsd)
		this.type = null
		this.object = o
	}
}

/** An agent wants to drop down.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event DropDown extends StampedEvent {
	val object : EnvironmentalObject
	new(ct : float, lsd : float, o : EnvironmentalObject) {
		super(ct, lsd)
		this.object = o
	}
}

/** Notify the simulation engine that a 
 * simulation step must be executed.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event ExecuteSimulationStep {}
